name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./client
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18
      - run: npm ci
      - run: npm run lint

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: lint
    defaults:
      run:
        working-directory: ./client
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18
      - run: npm ci
      - run: npx tsc --noEmit
      - run: npm run build
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        with:
          args: >
            -Dsonar.projectBaseDir=client
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  docker-build-and-push:
    name: Build and Push Docker Images to GHCR
    runs-on: ubuntu-latest
    needs: build
    # This permissions block is the key to letting your workflow push to GHCR
    permissions:
      contents: read
      packages: write 
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker (frontend)
        id: meta_frontend
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/gradconnect-frontend

      - name: Extract metadata for Docker (backend)
        id: meta_backend
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/gradconnect-backend

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./client
          push: true
          tags: ${{ steps.meta_frontend.outputs.tags }}
          labels: ${{ steps.meta_frontend.outputs.labels }}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ steps.meta_backend.outputs.tags }}
          labels: ${{ steps.meta_backend.outputs.labels }}

  # ... your deployment and notification jobs remain the same ...

  deploy-frontend:
    name: Deploy Frontend to Vercel
    runs-on: ubuntu-latest
    needs: docker-build-and-push
    steps:
      - name: Echo Vercel Deployment Step
        run: echo "Frontend deployed to Vercel"

  deploy-backend:
    name: Deploy Backend to Railway
    runs-on: ubuntu-latest
    needs: docker-build-and-push
    steps:
      - name: Echo Railway Deployment Step
        run: echo "Backend deployed to Railway"

  notify:
    name: Notify on Slack
    runs-on: ubuntu-latest
    needs: [deploy-frontend, deploy-backend]
    if: success()
    steps:
      - name: Send Slack notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_MESSAGE: |
            âœ… *CI/CD Pipeline Complete!*
            *Branch:* ${{ github.ref_name }}
            *Commit:* ${{ github.sha }}
            *Images pushed to GitHub Container Registry*
            *Deployments (simulated) successful*
            *Status:* Success ðŸš€
            *Author:* ${{ github.actor }}